# Aegilon MEV Protection Schema
# GraphQL schema for real-time MEV monitoring and user analytics

type User @entity(immutable: false) {
  id: ID! # User address
  address: Bytes!
  
  # Staking Information
  stakedBalance: BigInt!
  protectionLevel: Int!
  isProtected: Boolean!
  stakingRewards: BigInt!
  lastStakeTime: BigInt!
  
  # Protection Statistics
  threatsDetected: Int!
  threatsPrevented: Int!
  totalSavedAmount: BigInt!
  
  # Token Activity
  aegBalance: BigInt!
  totalStaked: BigInt!
  totalUnstaked: BigInt!
  totalRewardsClaimed: BigInt!
  
  # Relationships
  stakingEvents: [StakingEvent!]! @derivedFrom(field: "user")
  
  # Timestamps
  firstStakeTime: BigInt
  createdAt: BigInt!
  updatedAt: BigInt!
}

type StakingEvent @entity(immutable: true) {
  id: ID! # Transaction hash + log index
  user: User!
  type: StakingEventType!
  amount: BigInt!
  newStakedBalance: BigInt!
  newProtectionLevel: Int!
  
  # Transaction Details
  transactionHash: Bytes!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  gasUsed: BigInt!
}

enum StakingEventType {
  STAKE
  UNSTAKE
  REWARDS_CLAIMED
}

type MEVThreat @entity(immutable: true) {
  id: ID! # Threat ID (bytes32)
  threatId: Bytes!
  
  # Threat Details
  targetUser: Bytes!
  attacker: Bytes!
  potentialLoss: BigInt!
  gasPrice: BigInt!
  
  # Status
  detected: Boolean!
  prevented: Boolean!
  
  # Transaction info
  transactionHash: Bytes!
  blockNumber: BigInt!
  timestamp: BigInt!
  gasCost: BigInt
  mevThreatId: String
}

enum ThreatType {
  SANDWICH
  FRONTRUN 
  ARBITRAGE
  LIQUIDATION
  PRICE_MANIPULATION
  SUSPICIOUS_TRANSFER
  POTENTIAL_MEV
  HIGH_RISK_MEV
  DYNAMIC_CONTRACT_MEV
  COMMUNITY_REPORT
  PREVENTION
  UNKNOWN
}

type ProtectionEvent @entity(immutable: true) {
  id: ID! # Transaction hash + log index
  threatId: Bytes!
  targetUser: Bytes!
  gasCost: BigInt!
  successful: Boolean!
  
  # Transaction Details
  transactionHash: Bytes!
  blockNumber: BigInt!
  timestamp: BigInt!
}

type ThreatReport @entity(immutable: true) {
  id: ID! # Transaction hash + log index
  reporter: Bytes!
  threatId: Bytes!
  confidence: BigInt!
  verified: Boolean!
  
  # Transaction Details
  transactionHash: Bytes!
  blockNumber: BigInt!
  timestamp: BigInt!
}

type OracleUpdate @entity(immutable: true) {
  id: ID! # Transaction hash + log index
  asset: String!
  newPrice: BigInt!
  previousPrice: BigInt!
  priceChangePercent: BigInt
  
  # Transaction Details
  transactionHash: Bytes!
  blockNumber: BigInt!
  timestamp: BigInt!
}

type ProtocolStats @entity(immutable: false) {
  id: ID! # Singleton "1"
  
  # Token Statistics
  totalSupply: BigInt!
  totalStaked: BigInt!
  totalUsers: Int!
  totalProtectedUsers: Int!
  
  # MEV Protection Statistics
  totalThreatsDetected: Int!
  totalThreatsPrevented: Int!
  totalAmountSaved: BigInt!
  
  # Reward Statistics
  totalRewardsDistributed: BigInt!
  totalThreatReports: Int!
  
  # Protection Level Distribution
  level1Users: Int!
  level2Users: Int!
  level3Users: Int!
  level4Users: Int!
  level5Users: Int!
  
  # Last Update
  lastUpdated: BigInt!
}

type DailyStats @entity(immutable: true) {
  id: ID! # Date in YYYY-MM-DD format
  date: String!
  
  # Daily Activity
  newUsers: Int!
  activeUsers: Int!
  totalStaked: BigInt!
  totalUnstaked: BigInt!
  
  # MEV Protection
  threatsDetected: Int!
  threatsPrevented: Int!
  amountSaved: BigInt!
  
  # Rewards
  rewardsDistributed: BigInt!
  threatReports: Int!
  
  # Averages
  averageProtectionLevel: BigDecimal!
  averageStakedPerUser: BigDecimal!
}

type TokenTransfer @entity(immutable: true) {
  id: ID! # Transaction hash + log index
  from: Bytes!
  to: Bytes!
  amount: BigInt!
  
  # Transaction Details
  transactionHash: Bytes!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
}

type Transaction @entity(immutable: true) {
  id: ID! # Transaction hash
  hash: Bytes!
  from: Bytes!
  to: Bytes
  value: BigInt!
  gasPrice: BigInt!
  gasUsed: BigInt!
  
  # MEV Analysis
  isMEV: Boolean!
  mevType: String!
  riskScore: BigInt!
  
  # Pattern Detection
  isHighGas: Boolean! # Gas price anomaly
  isPotentialSandwich: Boolean! # Part of sandwich pattern
  isPotentialFrontRun: Boolean! # Front-running indicator
  isArbitrage: Boolean! # Arbitrage opportunity
  
  # Block Information
  blockNumber: BigInt!
  timestamp: BigInt!
  
  # MEV specific
  mevThreatId: String
}

type MEVAlert @entity(immutable: true) {
  id: ID! # Alert ID (tx hash + alert type)
  threatType: ThreatType!
  severity: AlertSeverity!
  targetAddress: Bytes!
  attackerAddress: Bytes!
  potentialLoss: BigInt!
  gasPrice: BigInt!
  gasCost: BigInt
  riskScore: BigInt!
  
  # Detection Details
  detected: Boolean!
  prevented: Boolean!
  
  # Optional fields for specific alert types
  priceChangePercent: BigInt
  asset: String
  reportId: String
  reporterAddress: Bytes
  
  # Timestamps
  blockNumber: BigInt!
  timestamp: BigInt!
  transactionHash: Bytes!
}

type SandwichPattern @entity(immutable: true) {
  id: ID! # Pattern ID
  
  # Sandwich Components
  frontTx: Transaction!
  victimTx: Transaction!
  backTx: Transaction!
  
  # Analysis
  totalProfit: BigInt!
  victimLoss: BigInt!
  priceManipulation: BigInt # Basis points
  
  # Detection
  detectedAt: BigInt!
  confirmed: Boolean!
  
  # Block Info
  blockNumber: BigInt!
  blockTimestamp: BigInt!
}

type GasPriceAnalytics @entity(immutable: false) {
  id: ID! # Block number or time interval
  
  # Gas Statistics
  avgGasPrice: BigInt!
  medianGasPrice: BigInt!
  maxGasPrice: BigInt!
  minGasPrice: BigInt!
  
  # Anomaly Detection
  gasSpike: Boolean!
  spikeThreshold: BigInt!
  anomalousTransactions: Int!
  
  # Time Window
  startTimestamp: BigInt!
  endTimestamp: BigInt!
  blockNumber: BigInt!
  transactionCount: Int!
}

# Enums for MEV categorization
enum AlertSeverity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}
