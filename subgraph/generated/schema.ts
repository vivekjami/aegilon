// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal,
  Int8,
} from "@graphprotocol/graph-ts";

export class User extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save User entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type User must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("User", id.toString(), this);
    }
  }

  static loadInBlock(id: string): User | null {
    return changetype<User | null>(store.get_in_block("User", id));
  }

  static load(id: string): User | null {
    return changetype<User | null>(store.get("User", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get address(): Bytes {
    let value = this.get("address");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set address(value: Bytes) {
    this.set("address", Value.fromBytes(value));
  }

  get stakedBalance(): BigInt {
    let value = this.get("stakedBalance");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set stakedBalance(value: BigInt) {
    this.set("stakedBalance", Value.fromBigInt(value));
  }

  get protectionLevel(): i32 {
    let value = this.get("protectionLevel");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set protectionLevel(value: i32) {
    this.set("protectionLevel", Value.fromI32(value));
  }

  get isProtected(): boolean {
    let value = this.get("isProtected");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set isProtected(value: boolean) {
    this.set("isProtected", Value.fromBoolean(value));
  }

  get stakingRewards(): BigInt {
    let value = this.get("stakingRewards");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set stakingRewards(value: BigInt) {
    this.set("stakingRewards", Value.fromBigInt(value));
  }

  get lastStakeTime(): BigInt {
    let value = this.get("lastStakeTime");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set lastStakeTime(value: BigInt) {
    this.set("lastStakeTime", Value.fromBigInt(value));
  }

  get threatsDetected(): i32 {
    let value = this.get("threatsDetected");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set threatsDetected(value: i32) {
    this.set("threatsDetected", Value.fromI32(value));
  }

  get threatsPrevented(): i32 {
    let value = this.get("threatsPrevented");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set threatsPrevented(value: i32) {
    this.set("threatsPrevented", Value.fromI32(value));
  }

  get totalSavedAmount(): BigInt {
    let value = this.get("totalSavedAmount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalSavedAmount(value: BigInt) {
    this.set("totalSavedAmount", Value.fromBigInt(value));
  }

  get aegBalance(): BigInt {
    let value = this.get("aegBalance");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set aegBalance(value: BigInt) {
    this.set("aegBalance", Value.fromBigInt(value));
  }

  get totalStaked(): BigInt {
    let value = this.get("totalStaked");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalStaked(value: BigInt) {
    this.set("totalStaked", Value.fromBigInt(value));
  }

  get totalUnstaked(): BigInt {
    let value = this.get("totalUnstaked");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalUnstaked(value: BigInt) {
    this.set("totalUnstaked", Value.fromBigInt(value));
  }

  get totalRewardsClaimed(): BigInt {
    let value = this.get("totalRewardsClaimed");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalRewardsClaimed(value: BigInt) {
    this.set("totalRewardsClaimed", Value.fromBigInt(value));
  }

  get stakingEvents(): StakingEventLoader {
    return new StakingEventLoader(
      "User",
      this.get("id")!.toString(),
      "stakingEvents",
    );
  }

  get firstStakeTime(): BigInt | null {
    let value = this.get("firstStakeTime");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set firstStakeTime(value: BigInt | null) {
    if (!value) {
      this.unset("firstStakeTime");
    } else {
      this.set("firstStakeTime", Value.fromBigInt(<BigInt>value));
    }
  }

  get createdAt(): BigInt {
    let value = this.get("createdAt");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdAt(value: BigInt) {
    this.set("createdAt", Value.fromBigInt(value));
  }

  get updatedAt(): BigInt {
    let value = this.get("updatedAt");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set updatedAt(value: BigInt) {
    this.set("updatedAt", Value.fromBigInt(value));
  }
}

export class StakingEvent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save StakingEvent entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type StakingEvent must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("StakingEvent", id.toString(), this);
    }
  }

  static loadInBlock(id: string): StakingEvent | null {
    return changetype<StakingEvent | null>(
      store.get_in_block("StakingEvent", id),
    );
  }

  static load(id: string): StakingEvent | null {
    return changetype<StakingEvent | null>(store.get("StakingEvent", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get user(): string {
    let value = this.get("user");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set user(value: string) {
    this.set("user", Value.fromString(value));
  }

  get type(): string {
    let value = this.get("type");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set type(value: string) {
    this.set("type", Value.fromString(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get newStakedBalance(): BigInt {
    let value = this.get("newStakedBalance");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set newStakedBalance(value: BigInt) {
    this.set("newStakedBalance", Value.fromBigInt(value));
  }

  get newProtectionLevel(): i32 {
    let value = this.get("newProtectionLevel");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set newProtectionLevel(value: i32) {
    this.set("newProtectionLevel", Value.fromI32(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get gasUsed(): BigInt {
    let value = this.get("gasUsed");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set gasUsed(value: BigInt) {
    this.set("gasUsed", Value.fromBigInt(value));
  }
}

export class MEVThreat extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save MEVThreat entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type MEVThreat must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("MEVThreat", id.toString(), this);
    }
  }

  static loadInBlock(id: string): MEVThreat | null {
    return changetype<MEVThreat | null>(store.get_in_block("MEVThreat", id));
  }

  static load(id: string): MEVThreat | null {
    return changetype<MEVThreat | null>(store.get("MEVThreat", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get threatId(): Bytes {
    let value = this.get("threatId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set threatId(value: Bytes) {
    this.set("threatId", Value.fromBytes(value));
  }

  get targetUser(): Bytes {
    let value = this.get("targetUser");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set targetUser(value: Bytes) {
    this.set("targetUser", Value.fromBytes(value));
  }

  get attacker(): Bytes {
    let value = this.get("attacker");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set attacker(value: Bytes) {
    this.set("attacker", Value.fromBytes(value));
  }

  get potentialLoss(): BigInt {
    let value = this.get("potentialLoss");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set potentialLoss(value: BigInt) {
    this.set("potentialLoss", Value.fromBigInt(value));
  }

  get gasPrice(): BigInt {
    let value = this.get("gasPrice");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set gasPrice(value: BigInt) {
    this.set("gasPrice", Value.fromBigInt(value));
  }

  get detected(): boolean {
    let value = this.get("detected");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set detected(value: boolean) {
    this.set("detected", Value.fromBoolean(value));
  }

  get prevented(): boolean {
    let value = this.get("prevented");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set prevented(value: boolean) {
    this.set("prevented", Value.fromBoolean(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get gasCost(): BigInt | null {
    let value = this.get("gasCost");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set gasCost(value: BigInt | null) {
    if (!value) {
      this.unset("gasCost");
    } else {
      this.set("gasCost", Value.fromBigInt(<BigInt>value));
    }
  }

  get mevThreatId(): string | null {
    let value = this.get("mevThreatId");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set mevThreatId(value: string | null) {
    if (!value) {
      this.unset("mevThreatId");
    } else {
      this.set("mevThreatId", Value.fromString(<string>value));
    }
  }
}

export class ProtectionEvent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ProtectionEvent entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ProtectionEvent must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("ProtectionEvent", id.toString(), this);
    }
  }

  static loadInBlock(id: string): ProtectionEvent | null {
    return changetype<ProtectionEvent | null>(
      store.get_in_block("ProtectionEvent", id),
    );
  }

  static load(id: string): ProtectionEvent | null {
    return changetype<ProtectionEvent | null>(store.get("ProtectionEvent", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get threatId(): Bytes {
    let value = this.get("threatId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set threatId(value: Bytes) {
    this.set("threatId", Value.fromBytes(value));
  }

  get targetUser(): Bytes {
    let value = this.get("targetUser");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set targetUser(value: Bytes) {
    this.set("targetUser", Value.fromBytes(value));
  }

  get gasCost(): BigInt {
    let value = this.get("gasCost");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set gasCost(value: BigInt) {
    this.set("gasCost", Value.fromBigInt(value));
  }

  get successful(): boolean {
    let value = this.get("successful");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set successful(value: boolean) {
    this.set("successful", Value.fromBoolean(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class ThreatReport extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ThreatReport entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ThreatReport must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("ThreatReport", id.toString(), this);
    }
  }

  static loadInBlock(id: string): ThreatReport | null {
    return changetype<ThreatReport | null>(
      store.get_in_block("ThreatReport", id),
    );
  }

  static load(id: string): ThreatReport | null {
    return changetype<ThreatReport | null>(store.get("ThreatReport", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get reporter(): Bytes {
    let value = this.get("reporter");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set reporter(value: Bytes) {
    this.set("reporter", Value.fromBytes(value));
  }

  get threatId(): Bytes {
    let value = this.get("threatId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set threatId(value: Bytes) {
    this.set("threatId", Value.fromBytes(value));
  }

  get confidence(): BigInt {
    let value = this.get("confidence");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set confidence(value: BigInt) {
    this.set("confidence", Value.fromBigInt(value));
  }

  get verified(): boolean {
    let value = this.get("verified");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set verified(value: boolean) {
    this.set("verified", Value.fromBoolean(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class OracleUpdate extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save OracleUpdate entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type OracleUpdate must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("OracleUpdate", id.toString(), this);
    }
  }

  static loadInBlock(id: string): OracleUpdate | null {
    return changetype<OracleUpdate | null>(
      store.get_in_block("OracleUpdate", id),
    );
  }

  static load(id: string): OracleUpdate | null {
    return changetype<OracleUpdate | null>(store.get("OracleUpdate", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get asset(): string {
    let value = this.get("asset");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set asset(value: string) {
    this.set("asset", Value.fromString(value));
  }

  get newPrice(): BigInt {
    let value = this.get("newPrice");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set newPrice(value: BigInt) {
    this.set("newPrice", Value.fromBigInt(value));
  }

  get previousPrice(): BigInt {
    let value = this.get("previousPrice");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set previousPrice(value: BigInt) {
    this.set("previousPrice", Value.fromBigInt(value));
  }

  get priceChangePercent(): BigInt | null {
    let value = this.get("priceChangePercent");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set priceChangePercent(value: BigInt | null) {
    if (!value) {
      this.unset("priceChangePercent");
    } else {
      this.set("priceChangePercent", Value.fromBigInt(<BigInt>value));
    }
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class ProtocolStats extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ProtocolStats entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ProtocolStats must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("ProtocolStats", id.toString(), this);
    }
  }

  static loadInBlock(id: string): ProtocolStats | null {
    return changetype<ProtocolStats | null>(
      store.get_in_block("ProtocolStats", id),
    );
  }

  static load(id: string): ProtocolStats | null {
    return changetype<ProtocolStats | null>(store.get("ProtocolStats", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get totalSupply(): BigInt {
    let value = this.get("totalSupply");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalSupply(value: BigInt) {
    this.set("totalSupply", Value.fromBigInt(value));
  }

  get totalStaked(): BigInt {
    let value = this.get("totalStaked");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalStaked(value: BigInt) {
    this.set("totalStaked", Value.fromBigInt(value));
  }

  get totalUsers(): i32 {
    let value = this.get("totalUsers");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set totalUsers(value: i32) {
    this.set("totalUsers", Value.fromI32(value));
  }

  get totalProtectedUsers(): i32 {
    let value = this.get("totalProtectedUsers");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set totalProtectedUsers(value: i32) {
    this.set("totalProtectedUsers", Value.fromI32(value));
  }

  get totalThreatsDetected(): i32 {
    let value = this.get("totalThreatsDetected");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set totalThreatsDetected(value: i32) {
    this.set("totalThreatsDetected", Value.fromI32(value));
  }

  get totalThreatsPrevented(): i32 {
    let value = this.get("totalThreatsPrevented");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set totalThreatsPrevented(value: i32) {
    this.set("totalThreatsPrevented", Value.fromI32(value));
  }

  get totalAmountSaved(): BigInt {
    let value = this.get("totalAmountSaved");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalAmountSaved(value: BigInt) {
    this.set("totalAmountSaved", Value.fromBigInt(value));
  }

  get totalRewardsDistributed(): BigInt {
    let value = this.get("totalRewardsDistributed");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalRewardsDistributed(value: BigInt) {
    this.set("totalRewardsDistributed", Value.fromBigInt(value));
  }

  get totalThreatReports(): i32 {
    let value = this.get("totalThreatReports");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set totalThreatReports(value: i32) {
    this.set("totalThreatReports", Value.fromI32(value));
  }

  get level1Users(): i32 {
    let value = this.get("level1Users");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set level1Users(value: i32) {
    this.set("level1Users", Value.fromI32(value));
  }

  get level2Users(): i32 {
    let value = this.get("level2Users");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set level2Users(value: i32) {
    this.set("level2Users", Value.fromI32(value));
  }

  get level3Users(): i32 {
    let value = this.get("level3Users");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set level3Users(value: i32) {
    this.set("level3Users", Value.fromI32(value));
  }

  get level4Users(): i32 {
    let value = this.get("level4Users");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set level4Users(value: i32) {
    this.set("level4Users", Value.fromI32(value));
  }

  get level5Users(): i32 {
    let value = this.get("level5Users");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set level5Users(value: i32) {
    this.set("level5Users", Value.fromI32(value));
  }

  get lastUpdated(): BigInt {
    let value = this.get("lastUpdated");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set lastUpdated(value: BigInt) {
    this.set("lastUpdated", Value.fromBigInt(value));
  }
}

export class DailyStats extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save DailyStats entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type DailyStats must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("DailyStats", id.toString(), this);
    }
  }

  static loadInBlock(id: string): DailyStats | null {
    return changetype<DailyStats | null>(store.get_in_block("DailyStats", id));
  }

  static load(id: string): DailyStats | null {
    return changetype<DailyStats | null>(store.get("DailyStats", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get date(): string {
    let value = this.get("date");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set date(value: string) {
    this.set("date", Value.fromString(value));
  }

  get newUsers(): i32 {
    let value = this.get("newUsers");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set newUsers(value: i32) {
    this.set("newUsers", Value.fromI32(value));
  }

  get activeUsers(): i32 {
    let value = this.get("activeUsers");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set activeUsers(value: i32) {
    this.set("activeUsers", Value.fromI32(value));
  }

  get totalStaked(): BigInt {
    let value = this.get("totalStaked");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalStaked(value: BigInt) {
    this.set("totalStaked", Value.fromBigInt(value));
  }

  get totalUnstaked(): BigInt {
    let value = this.get("totalUnstaked");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalUnstaked(value: BigInt) {
    this.set("totalUnstaked", Value.fromBigInt(value));
  }

  get threatsDetected(): i32 {
    let value = this.get("threatsDetected");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set threatsDetected(value: i32) {
    this.set("threatsDetected", Value.fromI32(value));
  }

  get threatsPrevented(): i32 {
    let value = this.get("threatsPrevented");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set threatsPrevented(value: i32) {
    this.set("threatsPrevented", Value.fromI32(value));
  }

  get amountSaved(): BigInt {
    let value = this.get("amountSaved");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set amountSaved(value: BigInt) {
    this.set("amountSaved", Value.fromBigInt(value));
  }

  get rewardsDistributed(): BigInt {
    let value = this.get("rewardsDistributed");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set rewardsDistributed(value: BigInt) {
    this.set("rewardsDistributed", Value.fromBigInt(value));
  }

  get threatReports(): i32 {
    let value = this.get("threatReports");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set threatReports(value: i32) {
    this.set("threatReports", Value.fromI32(value));
  }

  get averageProtectionLevel(): BigDecimal {
    let value = this.get("averageProtectionLevel");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set averageProtectionLevel(value: BigDecimal) {
    this.set("averageProtectionLevel", Value.fromBigDecimal(value));
  }

  get averageStakedPerUser(): BigDecimal {
    let value = this.get("averageStakedPerUser");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set averageStakedPerUser(value: BigDecimal) {
    this.set("averageStakedPerUser", Value.fromBigDecimal(value));
  }
}

export class TokenTransfer extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save TokenTransfer entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type TokenTransfer must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("TokenTransfer", id.toString(), this);
    }
  }

  static loadInBlock(id: string): TokenTransfer | null {
    return changetype<TokenTransfer | null>(
      store.get_in_block("TokenTransfer", id),
    );
  }

  static load(id: string): TokenTransfer | null {
    return changetype<TokenTransfer | null>(store.get("TokenTransfer", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get from(): Bytes {
    let value = this.get("from");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set from(value: Bytes) {
    this.set("from", Value.fromBytes(value));
  }

  get to(): Bytes {
    let value = this.get("to");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set to(value: Bytes) {
    this.set("to", Value.fromBytes(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }
}

export class Transaction extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Transaction entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Transaction must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Transaction", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Transaction | null {
    return changetype<Transaction | null>(
      store.get_in_block("Transaction", id),
    );
  }

  static load(id: string): Transaction | null {
    return changetype<Transaction | null>(store.get("Transaction", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get hash(): Bytes {
    let value = this.get("hash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set hash(value: Bytes) {
    this.set("hash", Value.fromBytes(value));
  }

  get from(): Bytes {
    let value = this.get("from");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set from(value: Bytes) {
    this.set("from", Value.fromBytes(value));
  }

  get to(): Bytes | null {
    let value = this.get("to");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set to(value: Bytes | null) {
    if (!value) {
      this.unset("to");
    } else {
      this.set("to", Value.fromBytes(<Bytes>value));
    }
  }

  get value(): BigInt {
    let value = this.get("value");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set value(value: BigInt) {
    this.set("value", Value.fromBigInt(value));
  }

  get gasPrice(): BigInt {
    let value = this.get("gasPrice");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set gasPrice(value: BigInt) {
    this.set("gasPrice", Value.fromBigInt(value));
  }

  get gasUsed(): BigInt {
    let value = this.get("gasUsed");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set gasUsed(value: BigInt) {
    this.set("gasUsed", Value.fromBigInt(value));
  }

  get isMEV(): boolean {
    let value = this.get("isMEV");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set isMEV(value: boolean) {
    this.set("isMEV", Value.fromBoolean(value));
  }

  get mevType(): string {
    let value = this.get("mevType");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set mevType(value: string) {
    this.set("mevType", Value.fromString(value));
  }

  get riskScore(): BigInt {
    let value = this.get("riskScore");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set riskScore(value: BigInt) {
    this.set("riskScore", Value.fromBigInt(value));
  }

  get isHighGas(): boolean {
    let value = this.get("isHighGas");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set isHighGas(value: boolean) {
    this.set("isHighGas", Value.fromBoolean(value));
  }

  get isPotentialSandwich(): boolean {
    let value = this.get("isPotentialSandwich");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set isPotentialSandwich(value: boolean) {
    this.set("isPotentialSandwich", Value.fromBoolean(value));
  }

  get isPotentialFrontRun(): boolean {
    let value = this.get("isPotentialFrontRun");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set isPotentialFrontRun(value: boolean) {
    this.set("isPotentialFrontRun", Value.fromBoolean(value));
  }

  get isArbitrage(): boolean {
    let value = this.get("isArbitrage");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set isArbitrage(value: boolean) {
    this.set("isArbitrage", Value.fromBoolean(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get mevThreatId(): string | null {
    let value = this.get("mevThreatId");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set mevThreatId(value: string | null) {
    if (!value) {
      this.unset("mevThreatId");
    } else {
      this.set("mevThreatId", Value.fromString(<string>value));
    }
  }
}

export class MEVAlert extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save MEVAlert entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type MEVAlert must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("MEVAlert", id.toString(), this);
    }
  }

  static loadInBlock(id: string): MEVAlert | null {
    return changetype<MEVAlert | null>(store.get_in_block("MEVAlert", id));
  }

  static load(id: string): MEVAlert | null {
    return changetype<MEVAlert | null>(store.get("MEVAlert", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get threatType(): string {
    let value = this.get("threatType");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set threatType(value: string) {
    this.set("threatType", Value.fromString(value));
  }

  get severity(): string {
    let value = this.get("severity");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set severity(value: string) {
    this.set("severity", Value.fromString(value));
  }

  get targetAddress(): Bytes {
    let value = this.get("targetAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set targetAddress(value: Bytes) {
    this.set("targetAddress", Value.fromBytes(value));
  }

  get attackerAddress(): Bytes {
    let value = this.get("attackerAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set attackerAddress(value: Bytes) {
    this.set("attackerAddress", Value.fromBytes(value));
  }

  get potentialLoss(): BigInt {
    let value = this.get("potentialLoss");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set potentialLoss(value: BigInt) {
    this.set("potentialLoss", Value.fromBigInt(value));
  }

  get gasPrice(): BigInt {
    let value = this.get("gasPrice");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set gasPrice(value: BigInt) {
    this.set("gasPrice", Value.fromBigInt(value));
  }

  get gasCost(): BigInt | null {
    let value = this.get("gasCost");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set gasCost(value: BigInt | null) {
    if (!value) {
      this.unset("gasCost");
    } else {
      this.set("gasCost", Value.fromBigInt(<BigInt>value));
    }
  }

  get riskScore(): BigInt {
    let value = this.get("riskScore");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set riskScore(value: BigInt) {
    this.set("riskScore", Value.fromBigInt(value));
  }

  get detected(): boolean {
    let value = this.get("detected");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set detected(value: boolean) {
    this.set("detected", Value.fromBoolean(value));
  }

  get prevented(): boolean {
    let value = this.get("prevented");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set prevented(value: boolean) {
    this.set("prevented", Value.fromBoolean(value));
  }

  get priceChangePercent(): BigInt | null {
    let value = this.get("priceChangePercent");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set priceChangePercent(value: BigInt | null) {
    if (!value) {
      this.unset("priceChangePercent");
    } else {
      this.set("priceChangePercent", Value.fromBigInt(<BigInt>value));
    }
  }

  get asset(): string | null {
    let value = this.get("asset");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set asset(value: string | null) {
    if (!value) {
      this.unset("asset");
    } else {
      this.set("asset", Value.fromString(<string>value));
    }
  }

  get reportId(): string | null {
    let value = this.get("reportId");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set reportId(value: string | null) {
    if (!value) {
      this.unset("reportId");
    } else {
      this.set("reportId", Value.fromString(<string>value));
    }
  }

  get reporterAddress(): Bytes | null {
    let value = this.get("reporterAddress");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set reporterAddress(value: Bytes | null) {
    if (!value) {
      this.unset("reporterAddress");
    } else {
      this.set("reporterAddress", Value.fromBytes(<Bytes>value));
    }
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class SandwichPattern extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save SandwichPattern entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type SandwichPattern must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("SandwichPattern", id.toString(), this);
    }
  }

  static loadInBlock(id: string): SandwichPattern | null {
    return changetype<SandwichPattern | null>(
      store.get_in_block("SandwichPattern", id),
    );
  }

  static load(id: string): SandwichPattern | null {
    return changetype<SandwichPattern | null>(store.get("SandwichPattern", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get frontTx(): string {
    let value = this.get("frontTx");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set frontTx(value: string) {
    this.set("frontTx", Value.fromString(value));
  }

  get victimTx(): string {
    let value = this.get("victimTx");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set victimTx(value: string) {
    this.set("victimTx", Value.fromString(value));
  }

  get backTx(): string {
    let value = this.get("backTx");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set backTx(value: string) {
    this.set("backTx", Value.fromString(value));
  }

  get totalProfit(): BigInt {
    let value = this.get("totalProfit");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalProfit(value: BigInt) {
    this.set("totalProfit", Value.fromBigInt(value));
  }

  get victimLoss(): BigInt {
    let value = this.get("victimLoss");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set victimLoss(value: BigInt) {
    this.set("victimLoss", Value.fromBigInt(value));
  }

  get priceManipulation(): BigInt | null {
    let value = this.get("priceManipulation");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set priceManipulation(value: BigInt | null) {
    if (!value) {
      this.unset("priceManipulation");
    } else {
      this.set("priceManipulation", Value.fromBigInt(<BigInt>value));
    }
  }

  get detectedAt(): BigInt {
    let value = this.get("detectedAt");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set detectedAt(value: BigInt) {
    this.set("detectedAt", Value.fromBigInt(value));
  }

  get confirmed(): boolean {
    let value = this.get("confirmed");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set confirmed(value: boolean) {
    this.set("confirmed", Value.fromBoolean(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }
}

export class GasPriceAnalytics extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save GasPriceAnalytics entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type GasPriceAnalytics must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("GasPriceAnalytics", id.toString(), this);
    }
  }

  static loadInBlock(id: string): GasPriceAnalytics | null {
    return changetype<GasPriceAnalytics | null>(
      store.get_in_block("GasPriceAnalytics", id),
    );
  }

  static load(id: string): GasPriceAnalytics | null {
    return changetype<GasPriceAnalytics | null>(
      store.get("GasPriceAnalytics", id),
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get avgGasPrice(): BigInt {
    let value = this.get("avgGasPrice");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set avgGasPrice(value: BigInt) {
    this.set("avgGasPrice", Value.fromBigInt(value));
  }

  get medianGasPrice(): BigInt {
    let value = this.get("medianGasPrice");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set medianGasPrice(value: BigInt) {
    this.set("medianGasPrice", Value.fromBigInt(value));
  }

  get maxGasPrice(): BigInt {
    let value = this.get("maxGasPrice");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set maxGasPrice(value: BigInt) {
    this.set("maxGasPrice", Value.fromBigInt(value));
  }

  get minGasPrice(): BigInt {
    let value = this.get("minGasPrice");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set minGasPrice(value: BigInt) {
    this.set("minGasPrice", Value.fromBigInt(value));
  }

  get gasSpike(): boolean {
    let value = this.get("gasSpike");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set gasSpike(value: boolean) {
    this.set("gasSpike", Value.fromBoolean(value));
  }

  get spikeThreshold(): BigInt {
    let value = this.get("spikeThreshold");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set spikeThreshold(value: BigInt) {
    this.set("spikeThreshold", Value.fromBigInt(value));
  }

  get anomalousTransactions(): i32 {
    let value = this.get("anomalousTransactions");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set anomalousTransactions(value: i32) {
    this.set("anomalousTransactions", Value.fromI32(value));
  }

  get startTimestamp(): BigInt {
    let value = this.get("startTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set startTimestamp(value: BigInt) {
    this.set("startTimestamp", Value.fromBigInt(value));
  }

  get endTimestamp(): BigInt {
    let value = this.get("endTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endTimestamp(value: BigInt) {
    this.set("endTimestamp", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get transactionCount(): i32 {
    let value = this.get("transactionCount");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set transactionCount(value: i32) {
    this.set("transactionCount", Value.fromI32(value));
  }
}

export class StakingEventLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): StakingEvent[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<StakingEvent[]>(value);
  }
}
